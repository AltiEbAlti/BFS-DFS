#include "SFML/Graphics.hpp"
#include <cstdlib>
#include <ctime>
#include <iostream>
#define N 20
#include <vector>

int  idx21(int y, int x){
	return x+y*N;
}

std::vector<int> find_island(char *arr){
	std::vector<int> result;
	std::array<bool, N*N> checked = {};
	std::vector <sf::Vector2i> queue {sf::Vector2i(N-1, N-1)};
	while(!queue.empty()){
		sf::Vector2i node = queue.back();
		int x = node.x;
		int y = node.y;
		result.push_back(idx21(y,x));
		checked[idx21(node.y, node.x)] = true;
		queue.pop_back();
		if (x-1 >= 0 && arr[N*N-1] == arr[idx21(y,x-1)] && !(checked[idx21(y,x-1)])){
			queue.insert(queue.begin(), sf::Vector2i(x-1, y));
		}
		if (y-1 >= 0 && arr[N*N-1] == arr[idx21(y-1,x)] && !(checked[idx21(y-1,x)])){
			queue.insert(queue.begin(), sf::Vector2i(x, y-1));
		}
		if (x+1 < N && arr[N*N-1] == arr[idx21(y,x+1)] && !(checked[idx21(y,x+1)])){
			queue.insert(queue.begin(), sf::Vector2i(x+1, y));
		}
		if (y+1 < N && arr[N*N-1] == arr[idx21(y+1,x)] && !(checked[idx21(y+1,x)])){
			queue.insert(queue.begin(), sf::Vector2i(x, y+1));
		}
	}


	return result;
}



int main(){
		srand(time(0));
		sf::RenderWindow window(sf::VideoMode(50*N, 50*N), "Test");
		

		sf::Texture image1;
		image1.loadFromFile("light.png");
		sf::Texture image2;
		image2.loadFromFile("dark.png");
		sf::Texture image4;
		image4.loadFromFile("darkpurple.png");
		sf::Texture image3;
		image3.loadFromFile("lightpurple.png"); //("D:\\eclipse_works\\chessBoard\\src\\");
		sf::Texture image5;
		image5.loadFromFile("green.png");
		sf::Sprite rectangle(image2);
		sf::Texture Colors[] = {image1, image2, image5, image3, image4};

		char arr[N*N] = {};
		for (int i = 0; i<=N*N; i++)
				arr[i] = rand()%2;

		std::vector<int> island = find_island(arr);
		for (int i = 0; i<island.size(); i++){
			arr[island[i]] = 2;
		}

		while(window.isOpen()){
			sf::Event event;
			while(window.pollEvent(event)){
				if(event.type == sf::Event::Closed){
					window.close();
				}
				window.clear();
				;

				for (int i = 0; i<=N*N; i++ ){
					if (i % N == 0){
						rectangle.setTexture(Colors[arr[i]]);

						rectangle.setPosition(0, i/N*50);
					}else{

					rectangle.setPosition(50*(i%N),rectangle.getPosition().y);
					rectangle.setTexture(Colors[arr[i]]); //

					}

					window.draw(rectangle);
				}

				rectangle.setPosition(0,0);
				window.display();

			}
		}


		return 0;
}

